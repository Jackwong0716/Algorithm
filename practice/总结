附：
（1）有很多找规律题。


一，从杨辉三角的题目：
解题有两种思路：
（1）从表面的下标规律出发，容易解题
其中涉及的一些思路：
记忆上次的东西：可以利用两个list，一个是临时的，记录本次产生的数据，最后放到那个下次使用的list中。一个是用与下次使用的。
（2）从数学的规律出发，比较复杂，需要一定的数学功底。

二，关于蓝桥杯的得分技巧
（1）判分的准则是根据它在系统中设定的样例通过数来判。所以实在不会时可以猜测，直接写出这个数输出。
（2）问题描述中关于数的范围不需要考虑这种异常数据。但是如果涉及数的”长度“需要考虑。
(3)输入格式的数的范围一般也不需考虑。
（4）但是输出格式一定要注意，他要求的。例如：是的时候输出。。，否则输出-1.

三，递归使用循环处理
    //使用递归，在数值特别大时会出现栈溢出。所以用循环。
    //循环代替递归需解决两个问题：（1）循环次数（2）保存上次的值。
四，高精度计算
（1）用数组倒叙存储，倒叙输出。
（2）注意位数的不同，个位直接存入数组，进位保存临时变量，下次使用。

五，算法思想：贪心。
（1）最小贪心，典型代表Huffman树。只是计算费用值不需要写树。
如果写树，则要写出二叉树的api，https://blog.csdn.net/likunkun__/article/details/80258515

六，递归函数的书写
（1）一般是先结束条件
（2）递归dfs（）中，调用dfs（）
（3）回溯时的处理。
例如：
    public static void dfs(int row){
        if(row == n){
            method ++;
            return;
        }else {
           for (int i = 0; i < n; i++){
               if(check(row,i)){
                   a[row] = i;
                   dfs(row + 1);    //递归。
                   a[row] = 0;          //回溯时的处理,因为这个数组是一个全局的，在下一次的
                                        //解进行判断时还需要用到这个数组。存有值会影响check函数判断。
               }
           }
        }
    }

七，深度搜索和宽度优先搜索的理解，及在算法中的实际应用。
深搜：先访问最新的节点
这个有图文详示：http://www.hongyanliren.com/2017m02/37813.html
https://blog.csdn.net/yanweiqi1754989931/article/details/109603384  //这个有dfs的模板。
https://juejin.cn/post/6844904142658338830
宽搜：先访问最前面的节点。

八，龟兔赛跑总结
（1）两个对象的数据虽然关联，但是借助分情况累加，可得最后结果。
（2）退出条件一般放前面。